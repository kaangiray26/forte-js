/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /gh/kaangiray26/forte.js@1.0/ft.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class Forte{constructor(){this.username=null,this.token=null,this.server=null,this.online=!1,this.session=null}async login(s,e,t){this.server=s,this.username=e,this.token=t;let i=btoa(this.username+":"+this.token);return await fetch(this.server+"/api/session",{method:"GET",headers:{Authorization:"Basic "+i}}).then((s=>(this.online=!0,s.json()))).then((s=>(this.session=s.session,!0))).catch((s=>{throw console.log(s),new Error("Failed to login via credentials.")}))}async API(s){return await fetch(this.server+"/api"+s+`?session=${this.session}`,{method:"GET",credentials:"include"}).then((s=>s.json()))}async fAPI(s,e,t=null){return await fetch(this.server+"/f/api"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({domain:s,query:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async alive(s){return await fetch(s+"/alive").then((s=>s.json()))}async test(){return await this.API("/test")}async session_check(){return await this.API("/session/check")}async upload_profile_cover(s){let e=new FormData;return e.append("cover",s),await fetch(this.server+"/api/cover"+`?session=${this.session}`,{method:"POST",body:e,credentials:"include"}).then((s=>s.json()))}async search(s){return await this.API("/search/"+s)}async search_station(s){return await this.API("/station/search/"+s)}async stream(s){return await this.API("/stream/"+s)}async stream_headers(s){return await fetch(this.server+"/api/stream"+s+`?session=${this.session}`,{method:"HEAD",credentials:"include"}).then((s=>s.headers))}async federated_stream(s,e){return await fetch(this.server+"/f/api/stream"+s+`?challenge=${e}`,{method:"GET",credentials:"include"}).then((s=>s.headers))}async federated_stream_headers(s,e){return await fetch(this.server+"/f/api/stream"+s+`?challenge=${e}`,{method:"HEAD",credentials:"include"}).then((s=>s.headers))}async artists(s){return await this.API("/artists/"+s)}async albums(s){return await this.API("/albums/"+s)}async playlists(s){return await this.API("/playlists/"+s)}async profile(){return await this.API("/profile")}async profile_history(){return await this.API("/profile/history")}async profile_history_add(s,e=null){return await fetch(this.server+"/api/profile/history/add"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({track:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async profile_favorites(s,e){return await this.API("/profile/tracks/"+s+"/"+e)}async profile_playlists(s,e){return await this.API("/profile/playlists/"+s+"/"+e)}async profile_albums(s,e){return await this.API("/profile/albums/"+s+"/"+e)}async profile_artists(s,e){return await this.API("/profile/artists/"+s+"/"+e)}async playlist_create(s,e){let t=new FormData;return t.append("title",s),e&&t.append("cover",e),await fetch(this.server+"/api/profile/create_playlist"+`?session=${this.session}`,{method:"POST",body:t,credentials:"include"}).then((s=>s.json()))}async user(s){return await this.API("/user/"+s)}async user_basic(s){return await this.API("/user/"+s+"/basic/")}async user_history(s){return await this.API("/user/"+s+"/history/")}async user_favorites(s,e,t){return await this.API("/user/"+s+"/tracks/"+e+"/"+t)}async user_playlists(s,e,t){return await this.API("/user/"+s+"/playlists/"+e+"/"+t)}async user_albums(s,e,t){return await this.API("/user/"+s+"/albums/"+e+"/"+t)}async user_artists(s,e,t){return await this.API("/user/"+s+"/artists/"+e+"/"+t)}async user_friends(s){return await this.API("/user/"+s+"/friends")}async track(s){return await this.API("/track/"+s)}async track_basic(s){return await this.API("/track/"+s+"/basic")}async is_track_loved(s){return await this.API("/track/"+s+"/loved")}async artist(s){return await this.API("/artist/"+s)}async artist_basic(s){return await this.API("/artist/"+s+"/basic")}async is_artist_loved(s){return await this.API("/artist/"+s+"/loved")}async album(s){return await this.API("/album/"+s)}async album_basic(s){return await this.API("/album/"+s+"/basic")}async is_album_loved(s){return await this.API("/album/"+s+"/loved")}async multiple_tracks(s){return await fetch(this.server+"/api/tracks/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s}),credentials:"include"}).then((s=>s.json()))}async multiple_albums(s){return await fetch(this.server+"/api/albums/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s}),credentials:"include"}).then((s=>s.json()))}async multiple_artists(s){return await fetch(this.server+"/api/artists/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s}),credentials:"include"}).then((s=>s.json()))}async multiple_playlists(s){return await fetch(this.server+"/api/playlists/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s}),credentials:"include"}).then((s=>s.json()))}async random_track(){return await this.API("/random/track")}async random_tracks(){return await this.API("/random/tracks")}async friends(){return await this.API("/friends")}async is_friend(s){return await this.API("/friends/"+s)}async add_friend(s,e=null){return await fetch(this.server+"/api/friends/add"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async remove_friend(s,e=null){return await fetch(this.server+"/api/friends/remove"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async playlist(s){return await this.API("/playlist/"+s)}async playlist_basic(s){return await this.API("/playlist/"+s+"/basic")}async delete_playlist(s){return await this.API("/playlist/"+s+"/delete")}async playlist_tracks(s){return await this.API("/playlist/"+s+"/tracks")}async playlist_add(s,e,t=null){return await fetch(this.server+"/api/playlist/"+s+"/add_track"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({track:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async playlist_add(s,e){return await fetch(this.server+"/api/playlist/"+s+"/delete_track"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({index:e}),credentials:"include"}).then((s=>s.json()))}async is_playlist_loved(s){return await this.API("/playlist/"+s+"/loved")}async station(s){return await this.API("/station/"+s)}async station_url(s){return await this.API("/station/"+s+"/url")}async author_playlists(s){return await this.API("/author/"+s+"/playlists")}async love_track(s,e=null){return await fetch(this.server+"/api/track/love"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async unlove_track(s,e=null){return await fetch(this.server+"/api/track/unlove"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async love_album(s,e=null){return await fetch(this.server+"/api/album/love"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async unlove_album(s,e=null){return await fetch(this.server+"/api/album/unlove"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async love_artist(s,e=null){return await fetch(this.server+"/api/artist/love"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async unlove_artist(s,e=null){return await fetch(this.server+"/api/artist/unlove"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async love_playlist(s,e=null){return await fetch(this.server+"/api/playlist/love"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async unlove_playlist(s,e=null){return await fetch(this.server+"/api/playlist/unlove"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:s,challenge:e}),credentials:"include"}).then((s=>s.json()))}async track_exists(s){return await this.API("/track/"+s+"/exists")}async album_exists(s){return await this.API("/album/"+s+"/exists")}async artist_exists(s){return await this.API("/artist/"+s+"/exists")}async playlist_exists(s){return await this.API("/playlist/"+s+"/exists")}async user_exists(s){return await this.API("/user/"+s+"/exists")}async lyrics(s,e,t=null){return await fetch(this.server+"/api/lyrics"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({artist:s,title:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async lastfm_api_key(){return await this.API("/lastfm/auth")}async lastfm_session_key(s){return await fetch(this.server+"/api/lastfm/auth"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:s}),credentials:"include"}).then((s=>s.json()))}async lastfm_artist(s){return await fetch(this.server+"/api/lastfm/artist"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({artist:s}),credentials:"include"}).then((s=>s.json()))}async scrobble(s,e,t=null){return await fetch(this.server+"/api/lastfm/scrobble"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({track:s,sk:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async lastfm_username(s){return await this.API("/lastfm/profile/"+s)}async add_comment(s,e,t=null,i=null,a){return await fetch(this.server+"/api/lastfm/scrobble"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:s,type:e,id:t,uuid:i,comment:a}),credentials:"include"}).then((s=>s.json()))}async artist_comments(s,e){return await this.API("/comments/artist/"+s+"/"+e)}async album_comments(s,e){return await this.API("/comments/album/"+s+"/"+e)}async playlist_comments(s,e){return await this.API("/comments/playlist/"+s+"/"+e)}async federation_challenge(s){return await this.API("/f/challenge/"+s)}async add_federated_comment(s,e,t=null,i=null,a,n,r){return await fetch(this.server+"/f/api/comments"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:s,type:e,id:t,uuid:i,comment:a,domain:n,challenge:r}),credentials:"include"}).then((s=>s.json()))}async federated_tracks_basic(s,e,t){return await fetch(this.server+"/f/api/tracks/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s,domain:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async federated_albums_basic(s,e,t){return await fetch(this.server+"/f/api/albums/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s,domain:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async federated_artists_basic(s,e,t){return await fetch(this.server+"/f/api/artists/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s,domain:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}async federated_playlists_basic(s,e,t){return await fetch(this.server+"/f/api/playlists/basic"+`?session=${this.session}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ids:s,domain:e,challenge:t}),credentials:"include"}).then((s=>s.json()))}}!function(s){s.ft=new Forte}(window);
//# sourceMappingURL=/sm/5df8959ad0759a8c2002caf1d30a19ada9d8841821148f045e17dcb129326bf9.map
